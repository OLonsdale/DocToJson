@using System.Text.Json
@using System.Text.Json.Nodes
@using MudBlazor
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject IDialogService Dialog
@inject ISnackbar Snackbar

<MudExpansionPanels MultiExpansion>
    <MudExpansionPanel Text="Build Schema" Expanded>
        <MudSwitch T="bool"
                   Value="@(ForceStrict)"
                   ValueChanged="@((bool v) => { ForceStrict = v; RequestBuild(); })"
                   Color="Color.Primary"
                   Label="Force strict (Output will have all of the below, and nothing but the below)"/>
        
            <MudButtonGroup OverrideStyles="false">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Add" OnClick="AddField">Add Field</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" EndIcon="@Icons.Material.Filled.AutoAwesome" OnClick="AddExamples">Add Examples</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Info" EndIcon="@Icons.Material.Filled.UploadFile" OnClick="OpenImportDialog">Import Schema</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" EndIcon="@Icons.Material.Filled.ClearAll" OnClick="ClearAll">Clear All</MudButton>
            </MudButtonGroup>

        <MudTable Items="Fields" Dense="true" Hover="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Type</MudTh>
                @if (!ForceStrict)
                {
                    <MudTh>Required</MudTh>
                }
                <MudTh></MudTh>
            </HeaderContent>

            <RowTemplate Context="row">
                <MudTd>
                    <MudTextField T="string" Value="@row.Name" ValueChanged="@((string v) => { row.Name = v; RequestBuild(); })" Immediate="true"/>
                </MudTd>
                <MudTd>
                    <MudSelect T="string" Value="@row.Type" ValueChanged="@((string v) => { row.Type = v; RequestBuild(); })" Dense="true">
                        <MudSelectItem Value="@("string")">string</MudSelectItem>
                        <MudSelectItem Value="@("date-time")">string (date-time)</MudSelectItem>
                        <MudSelectItem Value="@("number")">number</MudSelectItem>
                        <MudSelectItem Value="@("array<string>")">array&lt;string&gt;</MudSelectItem>
                        <MudSelectItem Value="@("object")">object</MudSelectItem>
                    </MudSelect>
                </MudTd>
            @if (!ForceStrict)
                {
                    <MudTd>
                        <MudSwitch T="bool" Value="@row.Required" ValueChanged="@((bool v) =>
                                                                                {
                                                                                    row.Required = v;
                                                                                    RequestBuild();
                                                                                })" Disabled="ForceStrict" Color="Color.Primary"/>
                    </MudTd>
                }
                <MudTd>
                    <MudStack Row Spacing="1">
                        @if (row.Type == "object")
                        {
                            <MudButton Variant="Variant.Text" OnClick="@(() => AddChild(row))" StartIcon="@Icons.Material.Filled.Add">Add Child</MudButton>
                        }
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => Remove(row))"/>
                    </MudStack>
                </MudTd>
            </RowTemplate>

            <ChildRowContent Context="parent">
                @if (parent.Type == "object")
                {
                    <MudPaper Elevation="0" Class="pa-2">
                        <MudText Typo="Typo.subtitle2">Children of @parent.Name</MudText>

                        <MudTable Items="parent.Children" Dense="true" Hover="true">
                            <HeaderContent>
                                <MudTh>Name</MudTh>
                                <MudTh>Type</MudTh>
                            @if (!ForceStrict)
                                {
                                    <MudTh>Required</MudTh>
                                }
                                <MudTh></MudTh>
                            </HeaderContent>

                            <RowTemplate Context="child">
                                <MudTd>
                                    <MudTextField T="string" Value="@child.Name" ValueChanged="@((string v) => { child.Name = v; RequestBuild(); })" Immediate="true"/>
                                </MudTd>
                                <MudTd>
                                    <MudSelect T="string" Value="@child.Type" ValueChanged="@((string v) => { child.Type = v; RequestBuild(); })" Dense="true">
                                        <MudSelectItem Value="@("string")">string</MudSelectItem>
                                        <MudSelectItem Value="@("date-time")">string (date-time)</MudSelectItem>
                                        <MudSelectItem Value="@("number")">number</MudSelectItem>
                                        <MudSelectItem Value="@("array<string>")">array&lt;string&gt;</MudSelectItem>
                                        <MudSelectItem Value="@("object")">object</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                            @if (!ForceStrict)
                                {
                                    <MudTd>
                                        <MudSwitch T="bool" Value="@child.Required" ValueChanged="@((bool v) =>
                                                                                                  {
                                                                                                      child.Required = v;
                                                                                                      RequestBuild();
                                                                                                  })" Disabled="@(ForceStrict)" Color="Color.Primary"/>
                                    </MudTd>
                                }
                                <MudTd>
                                    <MudStack Row Spacing="1">
                                        @if (child.Type == "object")
                                        {
                                            <MudButton Variant="Variant.Text" OnClick="@(() => AddChild(child))" StartIcon="@Icons.Material.Filled.Add">Add Child</MudButton>
                                        }
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => RemoveChild(child))"/>
                                    </MudStack>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                }
            </ChildRowContent>
        </MudTable>

        @* <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Build" OnClick="Build">Build Schema</MudButton> *@
    </MudExpansionPanel>

    <MudExpansionPanel Expanded Text="Preview">
            <pre style="white-space:pre-wrap; margin:0">@Preview</pre>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    const string LS_Key_Fields = "pdfpoc_schema_fields";
    const string LS_Key_Strict = "pdfpoc_schema_strict";

    bool ForceStrict = true;
    List<Field> Fields = new();

    string Preview = "";
    CancellationTokenSource? _buildCts;

    protected override async Task OnInitializedAsync()
    {
        await LoadFromLocalStorage();
        SafeBuild();
    }

    // Import dialog
    async Task OpenImportDialog()
    {
        var dlg = await Dialog.ShowAsync<ImportSchemaDialog>("Import Schema");
        var result = await dlg.Result;

        if (!result.Canceled && result.Data is string json && !string.IsNullOrWhiteSpace(json))
        {
            if (TryImport(json))
            {
                Snackbar.Add("Schema imported.", Severity.Success);
                RequestBuild();
            }
            else
            {
                Snackbar.Add("Invalid schema JSON.", Severity.Error);
            }
        }
    }

    bool TryImport(string json)
    {
        try
        {
            using var doc = JsonDocument.Parse(json);
            var root = doc.RootElement;
            if (root.ValueKind != JsonValueKind.Object) return false;

            if (!root.TryGetProperty("type", out var typeEl) || typeEl.GetString() != "object") return false;
            if (!root.TryGetProperty("properties", out var propsEl) || propsEl.ValueKind != JsonValueKind.Object) return false;

            ForceStrict = root.TryGetProperty("additionalProperties", out var ap) && ap.ValueKind == JsonValueKind.False;

            var requiredSet = new HashSet<string>(StringComparer.Ordinal);
            if (root.TryGetProperty("required", out var reqEl) && reqEl.ValueKind == JsonValueKind.Array)
                foreach (var r in reqEl.EnumerateArray())
                    if (r.ValueKind == JsonValueKind.String) requiredSet.Add(r.GetString()!);

            Fields = ParseFields(propsEl, requiredSet);
            return true;
        }
        catch { return false; }
    }

    static List<Field> ParseFields(JsonElement propsEl, HashSet<string> requiredSet)
    {
        var list = new List<Field>();
        foreach (var p in propsEl.EnumerateObject())
        {
            var name = p.Name;
            var def = p.Value;
            var f = new Field { Name = name, Required = requiredSet.Contains(name), Type = "string" };

            if (def.ValueKind == JsonValueKind.Object && def.TryGetProperty("type", out var tEl))
            {
                var t = tEl.GetString();
                switch (t)
                {
                    case "string":
                        f.Type = (def.TryGetProperty("format", out var fmt) && fmt.GetString() == "date-time")
                            ? "date-time" : "string";
                        break;

                    case "number":
                    case "integer":
                        f.Type = "number";
                        break;

                    case "array":
                        if (def.TryGetProperty("items", out var items)
                            && items.ValueKind == JsonValueKind.Object
                            && items.TryGetProperty("type", out var it)
                            && it.GetString() == "string")
                            f.Type = "array<string>";
                        else
                            f.Type = "array<string>";
                        break;

                    case "object":
                        f.Type = "object";
                        var childReq = new HashSet<string>(StringComparer.Ordinal);
                        if (def.TryGetProperty("required", out var r2) && r2.ValueKind == JsonValueKind.Array)
                            foreach (var r in r2.EnumerateArray())
                                if (r.ValueKind == JsonValueKind.String) childReq.Add(r.GetString()!);

                        if (def.TryGetProperty("properties", out var childProps) && childProps.ValueKind == JsonValueKind.Object)
                            f.Children = ParseFields(childProps, childReq);
                        break;

                    default:
                        f.Type = "string";
                        break;
                }
            }

            list.Add(f);
        }
        return list;
    }

    // UI ops
    void AddField()
    {
        Fields.Add(new Field { Name = $"field_{Fields.Count + 1}", Required = true, Type = "string" });
        RequestBuild();
    }

    void AddExamples()
    {
        Fields.Clear();
        Fields.AddRange(new[]
        {
            new Field { Name = "contact_number", Required = false, Type = "string" },
            new Field { Name = "check_in", Required = true, Type = "date-time" },
            new Field { Name = "check_out", Required = true, Type = "date-time" },
            new Field
            {
                Name = "guests", Required = true, Type = "object",
                Children = new()
                {
                    new Field { Name = "count", Required = true, Type = "number" },
                    new Field { Name = "names", Required = true, Type = "array<string>" }
                }
            },
            new Field { Name = "confirmation_code", Required = true, Type = "string" },
            new Field { Name = "address", Required = true, Type = "string" },
            new Field { Name = "hosted_name", Required = false, Type = "string" },
            new Field
            {
                Name = "amount_paid", Required = true, Type = "object",
                Children = new()
                {
                    new Field { Name = "currency_code", Required = true, Type = "string" },
                    new Field { Name = "currency_amount", Required = true, Type = "number" },
                    new Field { Name = "price_per_night", Required = false, Type = "number" },
                    new Field { Name = "price_per_person_per_night", Required = false, Type = "number" }
                }
            },
            new Field { Name = "debug_notes", Required = false, Type = "string" }
        });
        RequestBuild();
    }

    void ClearAll()
    {
        Fields.Clear();
        Preview = "";
        _ = ValueChanged.InvokeAsync(null);
        _ = SaveToLocalStorage();
        StateHasChanged();
    }

    void Remove(Field f) { Fields.Remove(f); RequestBuild(); }
    void AddChild(Field parent)
    {
        parent.Children.Add(new Field { Name = $"child_{parent.Children.Count + 1}", Required = true, Type = "string" });
        RequestBuild();
    }
    void RemoveChild(Field child)
    {
        _ = RemoveFrom(Fields, child);
        RequestBuild();
    }
    bool RemoveFrom(List<Field> list, Field target)
    {
        if (list.Remove(target)) return true;
        foreach (var f in list)
            if (RemoveFrom(f.Children, target)) return true;
        return false;
    }

    // debounced autobuild
    void RequestBuild(int delayMs = 200)
    {
        _buildCts?.Cancel();
        _buildCts = new CancellationTokenSource();
        var token = _buildCts.Token;

        _ = Task.Run(async () =>
        {
            try { await Task.Delay(delayMs, token); } catch { return; }
            if (token.IsCancellationRequested) return;
            await InvokeAsync(SafeBuild);
        }, token);
    }

    void SafeBuild()
    {
        try { Build(); _ = SaveToLocalStorage(); }
        catch { }
    }

    void Build()
    {
        var topCount = Fields.Count(f => !string.IsNullOrWhiteSpace(f.Name));
        if (topCount == 0)
        {
            Preview = "";
            _ = ValueChanged.InvokeAsync(null);
            return;
        }

        var props = BuildProperties(Fields, out var required);
        var schema = new JsonObject
        {
            ["$schema"] = "https://json-schema.org/draft/2020-12/schema",
            ["type"] = "object",
            ["properties"] = props
        };

        if (required.Count > 0)
            schema["required"] = new JsonArray(required.Select(r => (JsonNode)r).ToArray());

        if (ForceStrict)
            schema["additionalProperties"] = false;

        Preview = schema.ToJsonString(new JsonSerializerOptions { WriteIndented = true });
        _ = ValueChanged.InvokeAsync(Preview);
    }

    JsonObject BuildProperties(List<Field> fields, out List<string> requiredList)
    {
        var props = new JsonObject();
        var req = new List<string>();

        foreach (var f in fields)
        {
            if (string.IsNullOrWhiteSpace(f.Name)) continue;

            JsonObject typeNode;
            if (f.Type == "object")
            {
                var childProps = BuildProperties(f.Children, out var childRequired);
                typeNode = new JsonObject
                {
                    ["type"] = "object",
                    ["properties"] = childProps
                };
                if (childRequired.Count > 0)
                    typeNode["required"] = new JsonArray(childRequired.Select(r => (JsonNode)r).ToArray());

                if (ForceStrict)
                    typeNode["additionalProperties"] = false;
            }
            else
            {
                typeNode = f.Type switch
                {
                    "date-time"     => new JsonObject { ["type"] = "string", ["format"] = "date-time" },
                    "number"        => new JsonObject { ["type"] = "number" },
                    "array<string>" => new JsonObject { ["type"] = "array", ["items"] = new JsonObject { ["type"] = "string" } },
                    _               => new JsonObject { ["type"] = "string" }
                };
            }

            if (!props.ContainsKey(f.Name))
                props[f.Name] = typeNode;

            if (ForceStrict || f.Required)
                req.Add(f.Name);
        }

        requiredList = req;
        return props;
    }

    async Task LoadFromLocalStorage()
    {
        try
        {
            var strict = await LocalStorage.GetItemAsync<bool?>(LS_Key_Strict);
            if (strict.HasValue) ForceStrict = strict.Value;

            var stored = await LocalStorage.GetItemAsStringAsync(LS_Key_Fields);
            if (!string.IsNullOrWhiteSpace(stored))
                Fields = JsonSerializer.Deserialize<List<Field>>(stored) ?? new();
        }
        catch { }
    }

    async Task SaveToLocalStorage()
    {
        try
        {
            await LocalStorage.SetItemAsync(LS_Key_Strict, ForceStrict);
            await LocalStorage.SetItemAsStringAsync(LS_Key_Fields, JsonSerializer.Serialize(Fields));
        }
        catch { }
    }

    class Field
    {
        public string Name { get; set; } = "";
        public bool Required { get; set; }
        public string Type { get; set; } = "string"; // "string" | "date-time" | "number" | "array<string>" | "object"
        public List<Field> Children { get; set; } = new();
    }
}
